// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [postgis]
}

model Member {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  nickname String
  password String

  locker        Locker?
  notes         Note[]
  notifications Notification[]
}

enum NoteState {
  DELETED
  ACTIVE
  OUT_DATED
}

model Note {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content   String?
  latitude  Float
  longitude Float

  noteState NoteState @default(ACTIVE)
  viewCount Int       @default(0)
  likeCount Int       @default(0)

  writerId BigInt?
  writer   Member? @relation(fields: [writerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  ownerId  BigInt?
  originId BigInt?

  savedNotes SavedNote[]
}

enum NotificationType {
  NOTE
  ACTION
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title              String
  detail             String
  noticeableId       BigInt
  notificationType   NotificationType
  notificationDetail String           @unique // 사용자 정의로 notification 진행

  notifiedMemberId BigInt?
  notifiedMember   Member? @relation(fields: [notifiedMemberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Locker {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId BigInt @unique
  owner   Member @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  viewedNoteIdList BigInt[]    @default([])
  savedNotes       SavedNote[]
}

enum SavedNoteState {
  LIKE
  SUBSCRIBE
  UN_LIKE
  UN_SUBSCRIBE
  REPORTED
}

model SavedNote {
  id        BigInt         @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    SavedNoteState

  lockerId BigInt
  locker   Locker @relation(fields: [lockerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  noteId BigInt
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([lockerId, noteId])
}
